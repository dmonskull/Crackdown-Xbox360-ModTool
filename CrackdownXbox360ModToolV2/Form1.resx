<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="styleManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAaGhoAHR0dBRAQECcYGBgePj4+ASIiIgAAAAAAAAAAACAbFQAhHBYAGhYRABsX
        EgAAAAAAAAAAABMTEwAUFBQHExMTKhMTEyMXFxYDFhYWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAGxsbADk5OgIJCQlxCgoK5jo6OtZsbGxOAAAAABkZGQAODhAAAAAAAC4v
        MlA6Oz1Yfn16AlxcWwAfHx8AICAgBA8PD2EPDw9pDw8PcBMUFFd+f4MCTk9RAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAAHR0dDQYGBsVpaWn/mpqa/21tbeRpaWlQAAAAAAAA
        AAAiIydSMzU65zY4Pe0uLzJZXlhQARgYGAATExMjEBAQbQoIBgIvMDNkHyAiuB4fHg4vMDAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcnJwAAAAABQUFBhG5ubv3Kysr/oKCg/21t
        beVoaGhTHB0hVC4vNOg6PEDFOTs/xC8xNushIyZWHx8hAAwMDEwJCQidIiQnYzIzN9gaGxuREREQByUl
        JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFlZWQBTU1MPcnJylnNz
        c/zJycn/oqKi/2tra+xFRknqOjs/qERERxxBQkUbOjs/qSwtMuQaGx5nBQUFtQICAvwSEhTsHBwdoRAQ
        ECkFBQUAaWlpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAImgpQC1xskAQk1RAhAW
        GgQyNDUYampqp3Fycv/IyMj/pKSk/1paWvcoKClfAAIHDwQIDBEoKSwjLjAzpRobHvYMDA3oEBET/yIj
        JpgYHB0QOUJHBEFQVgKir7IAcIOJAAAAAAAAAAAAAAAAAAAAAAAsGhNMIhYTWyMZGGsiGhl5IRkYhyYe
        HJciHBymIh0dtCQeHr4jHiDWTkpK/nFwcP+vr6//MzMz/xUTE+oiHiDRIh4g0R4cHs8WExTdGxkb/hcU
        Ff0eGx3+Ihwc1RwXF78eGRm1Jh8fpyEbG5khGRiJHxYVeSQXE2ofExFbJRYRTm5EL/qGeXb+hn5+/3tx
        cP+EdG//eFNA/42Dg/+Ke3b/fFZB/4+GhP+Ui4j/hoSD/ykqKv8RERD/Oigd/4V5dv9xaWn/VE5O/2Zf
        Xv9JPzv/g3dz/4p/ff+AW0f/hHFo/4ZuYv93U0P/hnl4/25SRv+Abmr/dUs3/4d6eP5nPyz6lHRn/8e1
        s/+kgnP/oY2J/8q+v/+ynJX/wr3A/9bU1v/HwcD/1tjb/9HMzf+Vc2L/cVtS/5aJh/91cnL/gX1+/31t
        Zv+XkpL/dW1q/7Oztv/Rycb/wKuk/7Oqqf/Kx8j/zcjH/7Gko//b1dn/nnxv/8O4uv+3q63/2MzO/5JO
        Kf+LbmX/wrKy/49pWf+Gbmf/ubW7/6afov+jlJT/squw/7rCzP+poqT/vLi7/5ZxYf+JaFv/ua2s/7Kr
        rf9iXmD/Xk1F/4B6fP+Wi4r/wcTK/7y4uv+ml5P/tLrB/7e5vv+jo6v/sLC7/6ihp/+bjI3/ysbM/6+m
        qf/Ct7v/jEso/2dDOP+Jf4L/fnl+/2xnav+AfID/eXV6/3dbU/93X1r/hYWN/29QR/+DdHL/j4eJ/3lv
        cP+Ce3z/WklE/3tlXf9EMy3/W1lc/396ff99Zl3/fnRy/3Ntbf97dHb/fnh6/2paWf9wZGb/a2Jk/3Fv
        dP94cXP/a0U4/3lvcf9oST7/Sz8+c0A4OIE6NDaZNTEzvDMvMe8tKiv9LSkp+S0qK/8xLjH/Lyst/y4s
        Lv8zMTT/MC4w/yIgIv8nISH/PB0P/00jEv8bFxf/HBob/ywnKP8sKSv8JyUo/yUjJf8oJij/Liss/Skl
        Jv0vLC3sOTU3wzQvMLQ9NDOSOzQ1g0Q9PnUAAAAADhgaAAAAAAA2ODkMLC4vQhgZGYcMDA2+CgsLtw8P
        EMATFBXyMzU6/yIjJv4UFRX6Gxwe/iIkJ/8pKCv/Liww/zE0Of8ZGhv/FBUW5iwtMNA2OT3+ERIU9wgJ
        CeIaGxy0GhsbnDIzNT5ARUcPDxUYBz1JTgBJVlsAAAAAAAAAAAAAAAAAAAAAAAAAAAB8fH0AjY6OBCYm
        Jh48PDwZGRkZFA4OD4MvMDTzKCos8x4eHsAQEBDNNDY5zjI0Of8zNTv/PkBF0Q8QEMYJCQnRJygq6zw+
        QuMaGhuQCwsLeg4ODj5CQ0gDMTM2AHVzegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAGhoaACAgIAYKCgpfCAgIrwsLDOUNDQ7+Gxsd4RwcHVM9PkJJNDY79jM1Ovo5Oj5WDQ0OTSgq
        Lr8jJCb+HB0doikpKQ4AAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAERERAAAAAAACwsLVAUFBeQDAwP2AQEB/wQEBP0qKy/5MzU61y8xNKA1NzzzNTg89iwu
        MqAxMzfRODo/9Do7P4UJCQmMBwcHrg4ODjkAAAAAMTExAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMjIyADIyMgQPDw9jDQ0NQQsLC1oDAwPuBAQE5jIzNm5CREm5QENH8To8
        Qv46PUL+QEJG8kJESMI/QURXXV5fBA8PDykEBATgBQUF0BERESMLCwsAU1NTAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2NjYAMTExASkpKQUZGRkAGxsbEgUFBcwFBQXNGxsbEU1O
        UApJS009OTs/2zU3PN5GR0pCSUlLDl9xgQAqKSkAXl5eAQ4ODj4GBgbECQkJj2NjYwIyMjIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQABsbGxULCwuIBgYGxAoK
        ClAAAAAAOzs8ADU1NggyMzi/LzE1xCIiIgooKSoAAAAAAAAAAABDQ0MAAAAAABISEhsRERE0PDw8ATU1
        NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAHR0dEBAQ
        EC4UFBQVRUVFACoqKgBPT1AAQT44Ai8xNaovMTWvS0hEA1JSUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGJkZAAnKTMALzE1kiwtMZUjJzIAZGVmAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJydAD5ARQA7PUBCOz1AREBCRgCMjI0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////h/4f/weMD/8DBA//AAQP/4A
        AH/8AAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAB/gAAD/+AAB//gAA//wAAH/8gBg//ww+P/8c
        P////n////5///////////////////////8=
</value>
  </data>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>148, 17</value>
  </metadata>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>236, 17</value>
  </metadata>
</root>